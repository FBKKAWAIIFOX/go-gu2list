// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gu2list/ent/defautldb"
	"gu2list/ent/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefautlDBCreate is the builder for creating a DefautlDB entity.
type DefautlDBCreate struct {
	config
	mutation *DefautlDBMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "userID" field.
func (ddc *DefautlDBCreate) SetUserID(u uint64) *DefautlDBCreate {
	ddc.mutation.SetUserID(u)
	return ddc
}

// SetLogs sets the "logs" field.
func (ddc *DefautlDBCreate) SetLogs(s string) *DefautlDBCreate {
	ddc.mutation.SetLogs(s)
	return ddc
}

// SetAccept sets the "accept" field.
func (ddc *DefautlDBCreate) SetAccept(b bool) *DefautlDBCreate {
	ddc.mutation.SetAccept(b)
	return ddc
}

// SetNillableAccept sets the "accept" field if the given value is not nil.
func (ddc *DefautlDBCreate) SetNillableAccept(b *bool) *DefautlDBCreate {
	if b != nil {
		ddc.SetAccept(*b)
	}
	return ddc
}

// SetTimeAt sets the "timeAt" field.
func (ddc *DefautlDBCreate) SetTimeAt(i int64) *DefautlDBCreate {
	ddc.mutation.SetTimeAt(i)
	return ddc
}

// SetNillableTimeAt sets the "timeAt" field if the given value is not nil.
func (ddc *DefautlDBCreate) SetNillableTimeAt(i *int64) *DefautlDBCreate {
	if i != nil {
		ddc.SetTimeAt(*i)
	}
	return ddc
}

// AddDefaultdbIDs adds the "defaultdb" edge to the Users entity by IDs.
func (ddc *DefautlDBCreate) AddDefaultdbIDs(ids ...int) *DefautlDBCreate {
	ddc.mutation.AddDefaultdbIDs(ids...)
	return ddc
}

// AddDefaultdb adds the "defaultdb" edges to the Users entity.
func (ddc *DefautlDBCreate) AddDefaultdb(u ...*Users) *DefautlDBCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ddc.AddDefaultdbIDs(ids...)
}

// Mutation returns the DefautlDBMutation object of the builder.
func (ddc *DefautlDBCreate) Mutation() *DefautlDBMutation {
	return ddc.mutation
}

// Save creates the DefautlDB in the database.
func (ddc *DefautlDBCreate) Save(ctx context.Context) (*DefautlDB, error) {
	ddc.defaults()
	return withHooks(ctx, ddc.sqlSave, ddc.mutation, ddc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ddc *DefautlDBCreate) SaveX(ctx context.Context) *DefautlDB {
	v, err := ddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddc *DefautlDBCreate) Exec(ctx context.Context) error {
	_, err := ddc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddc *DefautlDBCreate) ExecX(ctx context.Context) {
	if err := ddc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddc *DefautlDBCreate) defaults() {
	if _, ok := ddc.mutation.Accept(); !ok {
		v := defautldb.DefaultAccept
		ddc.mutation.SetAccept(v)
	}
	if _, ok := ddc.mutation.TimeAt(); !ok {
		v := defautldb.DefaultTimeAt
		ddc.mutation.SetTimeAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddc *DefautlDBCreate) check() error {
	if _, ok := ddc.mutation.UserID(); !ok {
		return &ValidationError{Name: "userID", err: errors.New(`ent: missing required field "DefautlDB.userID"`)}
	}
	if _, ok := ddc.mutation.Logs(); !ok {
		return &ValidationError{Name: "logs", err: errors.New(`ent: missing required field "DefautlDB.logs"`)}
	}
	if _, ok := ddc.mutation.Accept(); !ok {
		return &ValidationError{Name: "accept", err: errors.New(`ent: missing required field "DefautlDB.accept"`)}
	}
	if _, ok := ddc.mutation.TimeAt(); !ok {
		return &ValidationError{Name: "timeAt", err: errors.New(`ent: missing required field "DefautlDB.timeAt"`)}
	}
	return nil
}

func (ddc *DefautlDBCreate) sqlSave(ctx context.Context) (*DefautlDB, error) {
	if err := ddc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ddc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ddc.mutation.id = &_node.ID
	ddc.mutation.done = true
	return _node, nil
}

func (ddc *DefautlDBCreate) createSpec() (*DefautlDB, *sqlgraph.CreateSpec) {
	var (
		_node = &DefautlDB{config: ddc.config}
		_spec = sqlgraph.NewCreateSpec(defautldb.Table, sqlgraph.NewFieldSpec(defautldb.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ddc.conflict
	if value, ok := ddc.mutation.UserID(); ok {
		_spec.SetField(defautldb.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := ddc.mutation.Logs(); ok {
		_spec.SetField(defautldb.FieldLogs, field.TypeString, value)
		_node.Logs = value
	}
	if value, ok := ddc.mutation.Accept(); ok {
		_spec.SetField(defautldb.FieldAccept, field.TypeBool, value)
		_node.Accept = value
	}
	if value, ok := ddc.mutation.TimeAt(); ok {
		_spec.SetField(defautldb.FieldTimeAt, field.TypeInt64, value)
		_node.TimeAt = value
	}
	if nodes := ddc.mutation.DefaultdbIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DefautlDB.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DefautlDBUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ddc *DefautlDBCreate) OnConflict(opts ...sql.ConflictOption) *DefautlDBUpsertOne {
	ddc.conflict = opts
	return &DefautlDBUpsertOne{
		create: ddc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddc *DefautlDBCreate) OnConflictColumns(columns ...string) *DefautlDBUpsertOne {
	ddc.conflict = append(ddc.conflict, sql.ConflictColumns(columns...))
	return &DefautlDBUpsertOne{
		create: ddc,
	}
}

type (
	// DefautlDBUpsertOne is the builder for "upsert"-ing
	//  one DefautlDB node.
	DefautlDBUpsertOne struct {
		create *DefautlDBCreate
	}

	// DefautlDBUpsert is the "OnConflict" setter.
	DefautlDBUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "userID" field.
func (u *DefautlDBUpsert) SetUserID(v uint64) *DefautlDBUpsert {
	u.Set(defautldb.FieldUserID, v)
	return u
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *DefautlDBUpsert) UpdateUserID() *DefautlDBUpsert {
	u.SetExcluded(defautldb.FieldUserID)
	return u
}

// AddUserID adds v to the "userID" field.
func (u *DefautlDBUpsert) AddUserID(v uint64) *DefautlDBUpsert {
	u.Add(defautldb.FieldUserID, v)
	return u
}

// SetLogs sets the "logs" field.
func (u *DefautlDBUpsert) SetLogs(v string) *DefautlDBUpsert {
	u.Set(defautldb.FieldLogs, v)
	return u
}

// UpdateLogs sets the "logs" field to the value that was provided on create.
func (u *DefautlDBUpsert) UpdateLogs() *DefautlDBUpsert {
	u.SetExcluded(defautldb.FieldLogs)
	return u
}

// SetAccept sets the "accept" field.
func (u *DefautlDBUpsert) SetAccept(v bool) *DefautlDBUpsert {
	u.Set(defautldb.FieldAccept, v)
	return u
}

// UpdateAccept sets the "accept" field to the value that was provided on create.
func (u *DefautlDBUpsert) UpdateAccept() *DefautlDBUpsert {
	u.SetExcluded(defautldb.FieldAccept)
	return u
}

// SetTimeAt sets the "timeAt" field.
func (u *DefautlDBUpsert) SetTimeAt(v int64) *DefautlDBUpsert {
	u.Set(defautldb.FieldTimeAt, v)
	return u
}

// UpdateTimeAt sets the "timeAt" field to the value that was provided on create.
func (u *DefautlDBUpsert) UpdateTimeAt() *DefautlDBUpsert {
	u.SetExcluded(defautldb.FieldTimeAt)
	return u
}

// AddTimeAt adds v to the "timeAt" field.
func (u *DefautlDBUpsert) AddTimeAt(v int64) *DefautlDBUpsert {
	u.Add(defautldb.FieldTimeAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DefautlDBUpsertOne) UpdateNewValues() *DefautlDBUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DefautlDBUpsertOne) Ignore() *DefautlDBUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DefautlDBUpsertOne) DoNothing() *DefautlDBUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DefautlDBCreate.OnConflict
// documentation for more info.
func (u *DefautlDBUpsertOne) Update(set func(*DefautlDBUpsert)) *DefautlDBUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DefautlDBUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "userID" field.
func (u *DefautlDBUpsertOne) SetUserID(v uint64) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "userID" field.
func (u *DefautlDBUpsertOne) AddUserID(v uint64) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *DefautlDBUpsertOne) UpdateUserID() *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateUserID()
	})
}

// SetLogs sets the "logs" field.
func (u *DefautlDBUpsertOne) SetLogs(v string) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetLogs(v)
	})
}

// UpdateLogs sets the "logs" field to the value that was provided on create.
func (u *DefautlDBUpsertOne) UpdateLogs() *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateLogs()
	})
}

// SetAccept sets the "accept" field.
func (u *DefautlDBUpsertOne) SetAccept(v bool) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetAccept(v)
	})
}

// UpdateAccept sets the "accept" field to the value that was provided on create.
func (u *DefautlDBUpsertOne) UpdateAccept() *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateAccept()
	})
}

// SetTimeAt sets the "timeAt" field.
func (u *DefautlDBUpsertOne) SetTimeAt(v int64) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetTimeAt(v)
	})
}

// AddTimeAt adds v to the "timeAt" field.
func (u *DefautlDBUpsertOne) AddTimeAt(v int64) *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.AddTimeAt(v)
	})
}

// UpdateTimeAt sets the "timeAt" field to the value that was provided on create.
func (u *DefautlDBUpsertOne) UpdateTimeAt() *DefautlDBUpsertOne {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateTimeAt()
	})
}

// Exec executes the query.
func (u *DefautlDBUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DefautlDBCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DefautlDBUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DefautlDBUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DefautlDBUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DefautlDBCreateBulk is the builder for creating many DefautlDB entities in bulk.
type DefautlDBCreateBulk struct {
	config
	err      error
	builders []*DefautlDBCreate
	conflict []sql.ConflictOption
}

// Save creates the DefautlDB entities in the database.
func (ddcb *DefautlDBCreateBulk) Save(ctx context.Context) ([]*DefautlDB, error) {
	if ddcb.err != nil {
		return nil, ddcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ddcb.builders))
	nodes := make([]*DefautlDB, len(ddcb.builders))
	mutators := make([]Mutator, len(ddcb.builders))
	for i := range ddcb.builders {
		func(i int, root context.Context) {
			builder := ddcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DefautlDBMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ddcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ddcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ddcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ddcb *DefautlDBCreateBulk) SaveX(ctx context.Context) []*DefautlDB {
	v, err := ddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddcb *DefautlDBCreateBulk) Exec(ctx context.Context) error {
	_, err := ddcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddcb *DefautlDBCreateBulk) ExecX(ctx context.Context) {
	if err := ddcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DefautlDB.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DefautlDBUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ddcb *DefautlDBCreateBulk) OnConflict(opts ...sql.ConflictOption) *DefautlDBUpsertBulk {
	ddcb.conflict = opts
	return &DefautlDBUpsertBulk{
		create: ddcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddcb *DefautlDBCreateBulk) OnConflictColumns(columns ...string) *DefautlDBUpsertBulk {
	ddcb.conflict = append(ddcb.conflict, sql.ConflictColumns(columns...))
	return &DefautlDBUpsertBulk{
		create: ddcb,
	}
}

// DefautlDBUpsertBulk is the builder for "upsert"-ing
// a bulk of DefautlDB nodes.
type DefautlDBUpsertBulk struct {
	create *DefautlDBCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DefautlDBUpsertBulk) UpdateNewValues() *DefautlDBUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DefautlDB.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DefautlDBUpsertBulk) Ignore() *DefautlDBUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DefautlDBUpsertBulk) DoNothing() *DefautlDBUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DefautlDBCreateBulk.OnConflict
// documentation for more info.
func (u *DefautlDBUpsertBulk) Update(set func(*DefautlDBUpsert)) *DefautlDBUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DefautlDBUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "userID" field.
func (u *DefautlDBUpsertBulk) SetUserID(v uint64) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "userID" field.
func (u *DefautlDBUpsertBulk) AddUserID(v uint64) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *DefautlDBUpsertBulk) UpdateUserID() *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateUserID()
	})
}

// SetLogs sets the "logs" field.
func (u *DefautlDBUpsertBulk) SetLogs(v string) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetLogs(v)
	})
}

// UpdateLogs sets the "logs" field to the value that was provided on create.
func (u *DefautlDBUpsertBulk) UpdateLogs() *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateLogs()
	})
}

// SetAccept sets the "accept" field.
func (u *DefautlDBUpsertBulk) SetAccept(v bool) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetAccept(v)
	})
}

// UpdateAccept sets the "accept" field to the value that was provided on create.
func (u *DefautlDBUpsertBulk) UpdateAccept() *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateAccept()
	})
}

// SetTimeAt sets the "timeAt" field.
func (u *DefautlDBUpsertBulk) SetTimeAt(v int64) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.SetTimeAt(v)
	})
}

// AddTimeAt adds v to the "timeAt" field.
func (u *DefautlDBUpsertBulk) AddTimeAt(v int64) *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.AddTimeAt(v)
	})
}

// UpdateTimeAt sets the "timeAt" field to the value that was provided on create.
func (u *DefautlDBUpsertBulk) UpdateTimeAt() *DefautlDBUpsertBulk {
	return u.Update(func(s *DefautlDBUpsert) {
		s.UpdateTimeAt()
	})
}

// Exec executes the query.
func (u *DefautlDBUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DefautlDBCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DefautlDBCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DefautlDBUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
