// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gu2list/ent/defautldb"
	"gu2list/ent/predicate"
	"gu2list/ent/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefautlDBUpdate is the builder for updating DefautlDB entities.
type DefautlDBUpdate struct {
	config
	hooks    []Hook
	mutation *DefautlDBMutation
}

// Where appends a list predicates to the DefautlDBUpdate builder.
func (ddu *DefautlDBUpdate) Where(ps ...predicate.DefautlDB) *DefautlDBUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetUserID sets the "userID" field.
func (ddu *DefautlDBUpdate) SetUserID(u uint64) *DefautlDBUpdate {
	ddu.mutation.ResetUserID()
	ddu.mutation.SetUserID(u)
	return ddu
}

// AddUserID adds u to the "userID" field.
func (ddu *DefautlDBUpdate) AddUserID(u int64) *DefautlDBUpdate {
	ddu.mutation.AddUserID(u)
	return ddu
}

// SetLogs sets the "logs" field.
func (ddu *DefautlDBUpdate) SetLogs(s string) *DefautlDBUpdate {
	ddu.mutation.SetLogs(s)
	return ddu
}

// SetAccept sets the "accept" field.
func (ddu *DefautlDBUpdate) SetAccept(b bool) *DefautlDBUpdate {
	ddu.mutation.SetAccept(b)
	return ddu
}

// SetNillableAccept sets the "accept" field if the given value is not nil.
func (ddu *DefautlDBUpdate) SetNillableAccept(b *bool) *DefautlDBUpdate {
	if b != nil {
		ddu.SetAccept(*b)
	}
	return ddu
}

// SetTimeAt sets the "timeAt" field.
func (ddu *DefautlDBUpdate) SetTimeAt(i int64) *DefautlDBUpdate {
	ddu.mutation.ResetTimeAt()
	ddu.mutation.SetTimeAt(i)
	return ddu
}

// SetNillableTimeAt sets the "timeAt" field if the given value is not nil.
func (ddu *DefautlDBUpdate) SetNillableTimeAt(i *int64) *DefautlDBUpdate {
	if i != nil {
		ddu.SetTimeAt(*i)
	}
	return ddu
}

// AddTimeAt adds i to the "timeAt" field.
func (ddu *DefautlDBUpdate) AddTimeAt(i int64) *DefautlDBUpdate {
	ddu.mutation.AddTimeAt(i)
	return ddu
}

// AddDefaultdbIDs adds the "defaultdb" edge to the Users entity by IDs.
func (ddu *DefautlDBUpdate) AddDefaultdbIDs(ids ...int) *DefautlDBUpdate {
	ddu.mutation.AddDefaultdbIDs(ids...)
	return ddu
}

// AddDefaultdb adds the "defaultdb" edges to the Users entity.
func (ddu *DefautlDBUpdate) AddDefaultdb(u ...*Users) *DefautlDBUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ddu.AddDefaultdbIDs(ids...)
}

// Mutation returns the DefautlDBMutation object of the builder.
func (ddu *DefautlDBUpdate) Mutation() *DefautlDBMutation {
	return ddu.mutation
}

// ClearDefaultdb clears all "defaultdb" edges to the Users entity.
func (ddu *DefautlDBUpdate) ClearDefaultdb() *DefautlDBUpdate {
	ddu.mutation.ClearDefaultdb()
	return ddu
}

// RemoveDefaultdbIDs removes the "defaultdb" edge to Users entities by IDs.
func (ddu *DefautlDBUpdate) RemoveDefaultdbIDs(ids ...int) *DefautlDBUpdate {
	ddu.mutation.RemoveDefaultdbIDs(ids...)
	return ddu
}

// RemoveDefaultdb removes "defaultdb" edges to Users entities.
func (ddu *DefautlDBUpdate) RemoveDefaultdb(u ...*Users) *DefautlDBUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ddu.RemoveDefaultdbIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DefautlDBUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ddu.sqlSave, ddu.mutation, ddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DefautlDBUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DefautlDBUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DefautlDBUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ddu *DefautlDBUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(defautldb.Table, defautldb.Columns, sqlgraph.NewFieldSpec(defautldb.FieldID, field.TypeInt))
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.UserID(); ok {
		_spec.SetField(defautldb.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ddu.mutation.AddedUserID(); ok {
		_spec.AddField(defautldb.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ddu.mutation.Logs(); ok {
		_spec.SetField(defautldb.FieldLogs, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Accept(); ok {
		_spec.SetField(defautldb.FieldAccept, field.TypeBool, value)
	}
	if value, ok := ddu.mutation.TimeAt(); ok {
		_spec.SetField(defautldb.FieldTimeAt, field.TypeInt64, value)
	}
	if value, ok := ddu.mutation.AddedTimeAt(); ok {
		_spec.AddField(defautldb.FieldTimeAt, field.TypeInt64, value)
	}
	if ddu.mutation.DefaultdbCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ddu.mutation.RemovedDefaultdbIDs(); len(nodes) > 0 && !ddu.mutation.DefaultdbCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ddu.mutation.DefaultdbIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defautldb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ddu.mutation.done = true
	return n, nil
}

// DefautlDBUpdateOne is the builder for updating a single DefautlDB entity.
type DefautlDBUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefautlDBMutation
}

// SetUserID sets the "userID" field.
func (dduo *DefautlDBUpdateOne) SetUserID(u uint64) *DefautlDBUpdateOne {
	dduo.mutation.ResetUserID()
	dduo.mutation.SetUserID(u)
	return dduo
}

// AddUserID adds u to the "userID" field.
func (dduo *DefautlDBUpdateOne) AddUserID(u int64) *DefautlDBUpdateOne {
	dduo.mutation.AddUserID(u)
	return dduo
}

// SetLogs sets the "logs" field.
func (dduo *DefautlDBUpdateOne) SetLogs(s string) *DefautlDBUpdateOne {
	dduo.mutation.SetLogs(s)
	return dduo
}

// SetAccept sets the "accept" field.
func (dduo *DefautlDBUpdateOne) SetAccept(b bool) *DefautlDBUpdateOne {
	dduo.mutation.SetAccept(b)
	return dduo
}

// SetNillableAccept sets the "accept" field if the given value is not nil.
func (dduo *DefautlDBUpdateOne) SetNillableAccept(b *bool) *DefautlDBUpdateOne {
	if b != nil {
		dduo.SetAccept(*b)
	}
	return dduo
}

// SetTimeAt sets the "timeAt" field.
func (dduo *DefautlDBUpdateOne) SetTimeAt(i int64) *DefautlDBUpdateOne {
	dduo.mutation.ResetTimeAt()
	dduo.mutation.SetTimeAt(i)
	return dduo
}

// SetNillableTimeAt sets the "timeAt" field if the given value is not nil.
func (dduo *DefautlDBUpdateOne) SetNillableTimeAt(i *int64) *DefautlDBUpdateOne {
	if i != nil {
		dduo.SetTimeAt(*i)
	}
	return dduo
}

// AddTimeAt adds i to the "timeAt" field.
func (dduo *DefautlDBUpdateOne) AddTimeAt(i int64) *DefautlDBUpdateOne {
	dduo.mutation.AddTimeAt(i)
	return dduo
}

// AddDefaultdbIDs adds the "defaultdb" edge to the Users entity by IDs.
func (dduo *DefautlDBUpdateOne) AddDefaultdbIDs(ids ...int) *DefautlDBUpdateOne {
	dduo.mutation.AddDefaultdbIDs(ids...)
	return dduo
}

// AddDefaultdb adds the "defaultdb" edges to the Users entity.
func (dduo *DefautlDBUpdateOne) AddDefaultdb(u ...*Users) *DefautlDBUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dduo.AddDefaultdbIDs(ids...)
}

// Mutation returns the DefautlDBMutation object of the builder.
func (dduo *DefautlDBUpdateOne) Mutation() *DefautlDBMutation {
	return dduo.mutation
}

// ClearDefaultdb clears all "defaultdb" edges to the Users entity.
func (dduo *DefautlDBUpdateOne) ClearDefaultdb() *DefautlDBUpdateOne {
	dduo.mutation.ClearDefaultdb()
	return dduo
}

// RemoveDefaultdbIDs removes the "defaultdb" edge to Users entities by IDs.
func (dduo *DefautlDBUpdateOne) RemoveDefaultdbIDs(ids ...int) *DefautlDBUpdateOne {
	dduo.mutation.RemoveDefaultdbIDs(ids...)
	return dduo
}

// RemoveDefaultdb removes "defaultdb" edges to Users entities.
func (dduo *DefautlDBUpdateOne) RemoveDefaultdb(u ...*Users) *DefautlDBUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dduo.RemoveDefaultdbIDs(ids...)
}

// Where appends a list predicates to the DefautlDBUpdate builder.
func (dduo *DefautlDBUpdateOne) Where(ps ...predicate.DefautlDB) *DefautlDBUpdateOne {
	dduo.mutation.Where(ps...)
	return dduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DefautlDBUpdateOne) Select(field string, fields ...string) *DefautlDBUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DefautlDB entity.
func (dduo *DefautlDBUpdateOne) Save(ctx context.Context) (*DefautlDB, error) {
	return withHooks(ctx, dduo.sqlSave, dduo.mutation, dduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DefautlDBUpdateOne) SaveX(ctx context.Context) *DefautlDB {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DefautlDBUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DefautlDBUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dduo *DefautlDBUpdateOne) sqlSave(ctx context.Context) (_node *DefautlDB, err error) {
	_spec := sqlgraph.NewUpdateSpec(defautldb.Table, defautldb.Columns, sqlgraph.NewFieldSpec(defautldb.FieldID, field.TypeInt))
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DefautlDB.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defautldb.FieldID)
		for _, f := range fields {
			if !defautldb.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != defautldb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.UserID(); ok {
		_spec.SetField(defautldb.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := dduo.mutation.AddedUserID(); ok {
		_spec.AddField(defautldb.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := dduo.mutation.Logs(); ok {
		_spec.SetField(defautldb.FieldLogs, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Accept(); ok {
		_spec.SetField(defautldb.FieldAccept, field.TypeBool, value)
	}
	if value, ok := dduo.mutation.TimeAt(); ok {
		_spec.SetField(defautldb.FieldTimeAt, field.TypeInt64, value)
	}
	if value, ok := dduo.mutation.AddedTimeAt(); ok {
		_spec.AddField(defautldb.FieldTimeAt, field.TypeInt64, value)
	}
	if dduo.mutation.DefaultdbCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dduo.mutation.RemovedDefaultdbIDs(); len(nodes) > 0 && !dduo.mutation.DefaultdbCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dduo.mutation.DefaultdbIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   defautldb.DefaultdbTable,
			Columns: defautldb.DefaultdbPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DefautlDB{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defautldb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dduo.mutation.done = true
	return _node, nil
}
