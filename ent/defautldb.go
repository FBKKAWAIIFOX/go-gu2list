// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gu2list/ent/defautldb"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DefautlDB is the model entity for the DefautlDB schema.
type DefautlDB struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "userID" field.
	UserID uint64 `json:"userID,omitempty"`
	// Logs holds the value of the "logs" field.
	Logs string `json:"logs,omitempty"`
	// Accept holds the value of the "accept" field.
	Accept bool `json:"accept,omitempty"`
	// TimeAt holds the value of the "timeAt" field.
	TimeAt int64 `json:"timeAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DefautlDBQuery when eager-loading is set.
	Edges        DefautlDBEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DefautlDBEdges holds the relations/edges for other nodes in the graph.
type DefautlDBEdges struct {
	// Defaultdb holds the value of the defaultdb edge.
	Defaultdb []*Users `json:"defaultdb,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DefaultdbOrErr returns the Defaultdb value or an error if the edge
// was not loaded in eager-loading.
func (e DefautlDBEdges) DefaultdbOrErr() ([]*Users, error) {
	if e.loadedTypes[0] {
		return e.Defaultdb, nil
	}
	return nil, &NotLoadedError{edge: "defaultdb"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DefautlDB) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case defautldb.FieldAccept:
			values[i] = new(sql.NullBool)
		case defautldb.FieldID, defautldb.FieldUserID, defautldb.FieldTimeAt:
			values[i] = new(sql.NullInt64)
		case defautldb.FieldLogs:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DefautlDB fields.
func (dd *DefautlDB) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case defautldb.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dd.ID = int(value.Int64)
		case defautldb.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userID", values[i])
			} else if value.Valid {
				dd.UserID = uint64(value.Int64)
			}
		case defautldb.FieldLogs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logs", values[i])
			} else if value.Valid {
				dd.Logs = value.String
			}
		case defautldb.FieldAccept:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accept", values[i])
			} else if value.Valid {
				dd.Accept = value.Bool
			}
		case defautldb.FieldTimeAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeAt", values[i])
			} else if value.Valid {
				dd.TimeAt = value.Int64
			}
		default:
			dd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DefautlDB.
// This includes values selected through modifiers, order, etc.
func (dd *DefautlDB) Value(name string) (ent.Value, error) {
	return dd.selectValues.Get(name)
}

// QueryDefaultdb queries the "defaultdb" edge of the DefautlDB entity.
func (dd *DefautlDB) QueryDefaultdb() *UsersQuery {
	return NewDefautlDBClient(dd.config).QueryDefaultdb(dd)
}

// Update returns a builder for updating this DefautlDB.
// Note that you need to call DefautlDB.Unwrap() before calling this method if this DefautlDB
// was returned from a transaction, and the transaction was committed or rolled back.
func (dd *DefautlDB) Update() *DefautlDBUpdateOne {
	return NewDefautlDBClient(dd.config).UpdateOne(dd)
}

// Unwrap unwraps the DefautlDB entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dd *DefautlDB) Unwrap() *DefautlDB {
	_tx, ok := dd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DefautlDB is not a transactional entity")
	}
	dd.config.driver = _tx.drv
	return dd
}

// String implements the fmt.Stringer.
func (dd *DefautlDB) String() string {
	var builder strings.Builder
	builder.WriteString("DefautlDB(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dd.ID))
	builder.WriteString("userID=")
	builder.WriteString(fmt.Sprintf("%v", dd.UserID))
	builder.WriteString(", ")
	builder.WriteString("logs=")
	builder.WriteString(dd.Logs)
	builder.WriteString(", ")
	builder.WriteString("accept=")
	builder.WriteString(fmt.Sprintf("%v", dd.Accept))
	builder.WriteString(", ")
	builder.WriteString("timeAt=")
	builder.WriteString(fmt.Sprintf("%v", dd.TimeAt))
	builder.WriteByte(')')
	return builder.String()
}

// DefautlDBs is a parsable slice of DefautlDB.
type DefautlDBs []*DefautlDB
