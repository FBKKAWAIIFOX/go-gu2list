// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gu2list/ent/defautldb"
	"gu2list/ent/schema"
	"gu2list/ent/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersCreate is the builder for creating a Users entity.
type UsersCreate struct {
	config
	mutation *UsersMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "userID" field.
func (uc *UsersCreate) SetUserID(u uint64) *UsersCreate {
	uc.mutation.SetUserID(u)
	return uc
}

// SetRoles sets the "roles" field.
func (uc *UsersCreate) SetRoles(s *schema.Roles) *UsersCreate {
	uc.mutation.SetRoles(s)
	return uc
}

// SetManager sets the "Manager" field.
func (uc *UsersCreate) SetManager(b bool) *UsersCreate {
	uc.mutation.SetManager(b)
	return uc
}

// SetNillableManager sets the "Manager" field if the given value is not nil.
func (uc *UsersCreate) SetNillableManager(b *bool) *UsersCreate {
	if b != nil {
		uc.SetManager(*b)
	}
	return uc
}

// SetUpdateAt sets the "updateAt" field.
func (uc *UsersCreate) SetUpdateAt(i int64) *UsersCreate {
	uc.mutation.SetUpdateAt(i)
	return uc
}

// AddLogIDs adds the "logs" edge to the DefautlDB entity by IDs.
func (uc *UsersCreate) AddLogIDs(ids ...int) *UsersCreate {
	uc.mutation.AddLogIDs(ids...)
	return uc
}

// AddLogs adds the "logs" edges to the DefautlDB entity.
func (uc *UsersCreate) AddLogs(d ...*DefautlDB) *UsersCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddLogIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uc *UsersCreate) Mutation() *UsersMutation {
	return uc.mutation
}

// Save creates the Users in the database.
func (uc *UsersCreate) Save(ctx context.Context) (*Users, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsersCreate) SaveX(ctx context.Context) *Users {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UsersCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UsersCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UsersCreate) defaults() {
	if _, ok := uc.mutation.Manager(); !ok {
		v := users.DefaultManager
		uc.mutation.SetManager(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UsersCreate) check() error {
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "userID", err: errors.New(`ent: missing required field "Users.userID"`)}
	}
	if _, ok := uc.mutation.Roles(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required field "Users.roles"`)}
	}
	if _, ok := uc.mutation.Manager(); !ok {
		return &ValidationError{Name: "Manager", err: errors.New(`ent: missing required field "Users.Manager"`)}
	}
	if _, ok := uc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "updateAt", err: errors.New(`ent: missing required field "Users.updateAt"`)}
	}
	return nil
}

func (uc *UsersCreate) sqlSave(ctx context.Context) (*Users, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UsersCreate) createSpec() (*Users, *sqlgraph.CreateSpec) {
	var (
		_node = &Users{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(users.Table, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.UserID(); ok {
		_spec.SetField(users.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := uc.mutation.Roles(); ok {
		_spec.SetField(users.FieldRoles, field.TypeJSON, value)
		_node.Roles = value
	}
	if value, ok := uc.mutation.Manager(); ok {
		_spec.SetField(users.FieldManager, field.TypeBool, value)
		_node.Manager = value
	}
	if value, ok := uc.mutation.UpdateAt(); ok {
		_spec.SetField(users.FieldUpdateAt, field.TypeInt64, value)
		_node.UpdateAt = value
	}
	if nodes := uc.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   users.LogsTable,
			Columns: users.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(defautldb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Users.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsersUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (uc *UsersCreate) OnConflict(opts ...sql.ConflictOption) *UsersUpsertOne {
	uc.conflict = opts
	return &UsersUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UsersCreate) OnConflictColumns(columns ...string) *UsersUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UsersUpsertOne{
		create: uc,
	}
}

type (
	// UsersUpsertOne is the builder for "upsert"-ing
	//  one Users node.
	UsersUpsertOne struct {
		create *UsersCreate
	}

	// UsersUpsert is the "OnConflict" setter.
	UsersUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "userID" field.
func (u *UsersUpsert) SetUserID(v uint64) *UsersUpsert {
	u.Set(users.FieldUserID, v)
	return u
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *UsersUpsert) UpdateUserID() *UsersUpsert {
	u.SetExcluded(users.FieldUserID)
	return u
}

// AddUserID adds v to the "userID" field.
func (u *UsersUpsert) AddUserID(v uint64) *UsersUpsert {
	u.Add(users.FieldUserID, v)
	return u
}

// SetRoles sets the "roles" field.
func (u *UsersUpsert) SetRoles(v *schema.Roles) *UsersUpsert {
	u.Set(users.FieldRoles, v)
	return u
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UsersUpsert) UpdateRoles() *UsersUpsert {
	u.SetExcluded(users.FieldRoles)
	return u
}

// SetManager sets the "Manager" field.
func (u *UsersUpsert) SetManager(v bool) *UsersUpsert {
	u.Set(users.FieldManager, v)
	return u
}

// UpdateManager sets the "Manager" field to the value that was provided on create.
func (u *UsersUpsert) UpdateManager() *UsersUpsert {
	u.SetExcluded(users.FieldManager)
	return u
}

// SetUpdateAt sets the "updateAt" field.
func (u *UsersUpsert) SetUpdateAt(v int64) *UsersUpsert {
	u.Set(users.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "updateAt" field to the value that was provided on create.
func (u *UsersUpsert) UpdateUpdateAt() *UsersUpsert {
	u.SetExcluded(users.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "updateAt" field.
func (u *UsersUpsert) AddUpdateAt(v int64) *UsersUpsert {
	u.Add(users.FieldUpdateAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UsersUpsertOne) UpdateNewValues() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UsersUpsertOne) Ignore() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsersUpsertOne) DoNothing() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsersCreate.OnConflict
// documentation for more info.
func (u *UsersUpsertOne) Update(set func(*UsersUpsert)) *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsersUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "userID" field.
func (u *UsersUpsertOne) SetUserID(v uint64) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "userID" field.
func (u *UsersUpsertOne) AddUserID(v uint64) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateUserID() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUserID()
	})
}

// SetRoles sets the "roles" field.
func (u *UsersUpsertOne) SetRoles(v *schema.Roles) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetRoles(v)
	})
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateRoles() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateRoles()
	})
}

// SetManager sets the "Manager" field.
func (u *UsersUpsertOne) SetManager(v bool) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetManager(v)
	})
}

// UpdateManager sets the "Manager" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateManager() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateManager()
	})
}

// SetUpdateAt sets the "updateAt" field.
func (u *UsersUpsertOne) SetUpdateAt(v int64) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "updateAt" field.
func (u *UsersUpsertOne) AddUpdateAt(v int64) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "updateAt" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateUpdateAt() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *UsersUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UsersCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsersUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UsersUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UsersUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UsersCreateBulk is the builder for creating many Users entities in bulk.
type UsersCreateBulk struct {
	config
	err      error
	builders []*UsersCreate
	conflict []sql.ConflictOption
}

// Save creates the Users entities in the database.
func (ucb *UsersCreateBulk) Save(ctx context.Context) ([]*Users, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Users, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UsersCreateBulk) SaveX(ctx context.Context) []*Users {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UsersCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UsersCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Users.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsersUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ucb *UsersCreateBulk) OnConflict(opts ...sql.ConflictOption) *UsersUpsertBulk {
	ucb.conflict = opts
	return &UsersUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UsersCreateBulk) OnConflictColumns(columns ...string) *UsersUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UsersUpsertBulk{
		create: ucb,
	}
}

// UsersUpsertBulk is the builder for "upsert"-ing
// a bulk of Users nodes.
type UsersUpsertBulk struct {
	create *UsersCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UsersUpsertBulk) UpdateNewValues() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UsersUpsertBulk) Ignore() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsersUpsertBulk) DoNothing() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsersCreateBulk.OnConflict
// documentation for more info.
func (u *UsersUpsertBulk) Update(set func(*UsersUpsert)) *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsersUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "userID" field.
func (u *UsersUpsertBulk) SetUserID(v uint64) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "userID" field.
func (u *UsersUpsertBulk) AddUserID(v uint64) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "userID" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateUserID() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUserID()
	})
}

// SetRoles sets the "roles" field.
func (u *UsersUpsertBulk) SetRoles(v *schema.Roles) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetRoles(v)
	})
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateRoles() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateRoles()
	})
}

// SetManager sets the "Manager" field.
func (u *UsersUpsertBulk) SetManager(v bool) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetManager(v)
	})
}

// UpdateManager sets the "Manager" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateManager() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateManager()
	})
}

// SetUpdateAt sets the "updateAt" field.
func (u *UsersUpsertBulk) SetUpdateAt(v int64) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "updateAt" field.
func (u *UsersUpsertBulk) AddUpdateAt(v int64) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "updateAt" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateUpdateAt() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *UsersUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UsersCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UsersCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsersUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
