// Code generated by ent, DO NOT EDIT.

package users

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// FieldRoles holds the string denoting the roles field in the database.
	FieldRoles = "roles"
	// FieldManager holds the string denoting the manager field in the database.
	FieldManager = "manager"
	// FieldUpdateAt holds the string denoting the updateat field in the database.
	FieldUpdateAt = "update_at"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// Table holds the table name of the users in the database.
	Table = "users"
	// LogsTable is the table that holds the logs relation/edge. The primary key declared below.
	LogsTable = "users_logs"
	// LogsInverseTable is the table name for the DefautlDB entity.
	// It exists in this package in order to avoid circular dependency with the "defautldb" package.
	LogsInverseTable = "defautl_dbs"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldRoles,
	FieldManager,
	FieldUpdateAt,
}

var (
	// LogsPrimaryKey and LogsColumn2 are the table columns denoting the
	// primary key for the logs relation (M2M).
	LogsPrimaryKey = []string{"users_id", "defautl_db_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultManager holds the default value on creation for the "Manager" field.
	DefaultManager bool
)

// OrderOption defines the ordering options for the Users queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the userID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByManager orders the results by the Manager field.
func ByManager(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManager, opts...).ToFunc()
}

// ByUpdateAt orders the results by the updateAt field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByLogsCount orders the results by logs count.
func ByLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogsStep(), opts...)
	}
}

// ByLogs orders the results by logs terms.
func ByLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LogsTable, LogsPrimaryKey...),
	)
}
