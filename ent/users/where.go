// Code generated by ent, DO NOT EDIT.

package users

import (
	"gu2list/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "userID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUserID, v))
}

// Manager applies equality check predicate on the "Manager" field. It's identical to ManagerEQ.
func Manager(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldManager, v))
}

// UpdateAt applies equality check predicate on the "updateAt" field. It's identical to UpdateAtEQ.
func UpdateAt(v int64) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUpdateAt, v))
}

// UserIDEQ applies the EQ predicate on the "userID" field.
func UserIDEQ(v uint64) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "userID" field.
func UserIDNEQ(v uint64) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "userID" field.
func UserIDIn(vs ...uint64) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "userID" field.
func UserIDNotIn(vs ...uint64) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "userID" field.
func UserIDGT(v uint64) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "userID" field.
func UserIDGTE(v uint64) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "userID" field.
func UserIDLT(v uint64) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "userID" field.
func UserIDLTE(v uint64) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldUserID, v))
}

// ManagerEQ applies the EQ predicate on the "Manager" field.
func ManagerEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldManager, v))
}

// ManagerNEQ applies the NEQ predicate on the "Manager" field.
func ManagerNEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldManager, v))
}

// UpdateAtEQ applies the EQ predicate on the "updateAt" field.
func UpdateAtEQ(v int64) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "updateAt" field.
func UpdateAtNEQ(v int64) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "updateAt" field.
func UpdateAtIn(vs ...int64) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "updateAt" field.
func UpdateAtNotIn(vs ...int64) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "updateAt" field.
func UpdateAtGT(v int64) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "updateAt" field.
func UpdateAtGTE(v int64) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "updateAt" field.
func UpdateAtLT(v int64) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "updateAt" field.
func UpdateAtLTE(v int64) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldUpdateAt, v))
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LogsTable, LogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.DefautlDB) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Users) predicate.Users {
	return predicate.Users(sql.NotPredicates(p))
}
