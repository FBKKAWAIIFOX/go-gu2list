// Code generated by ent, DO NOT EDIT.

package defautldb

import (
	"gu2list/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "userID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldUserID, v))
}

// Logs applies equality check predicate on the "logs" field. It's identical to LogsEQ.
func Logs(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldLogs, v))
}

// Accept applies equality check predicate on the "accept" field. It's identical to AcceptEQ.
func Accept(v bool) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldAccept, v))
}

// TimeAt applies equality check predicate on the "timeAt" field. It's identical to TimeAtEQ.
func TimeAt(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldTimeAt, v))
}

// UserIDEQ applies the EQ predicate on the "userID" field.
func UserIDEQ(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "userID" field.
func UserIDNEQ(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "userID" field.
func UserIDIn(vs ...uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "userID" field.
func UserIDNotIn(vs ...uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "userID" field.
func UserIDGT(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "userID" field.
func UserIDGTE(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "userID" field.
func UserIDLT(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "userID" field.
func UserIDLTE(v uint64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLTE(FieldUserID, v))
}

// LogsEQ applies the EQ predicate on the "logs" field.
func LogsEQ(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldLogs, v))
}

// LogsNEQ applies the NEQ predicate on the "logs" field.
func LogsNEQ(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNEQ(FieldLogs, v))
}

// LogsIn applies the In predicate on the "logs" field.
func LogsIn(vs ...string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldIn(FieldLogs, vs...))
}

// LogsNotIn applies the NotIn predicate on the "logs" field.
func LogsNotIn(vs ...string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNotIn(FieldLogs, vs...))
}

// LogsGT applies the GT predicate on the "logs" field.
func LogsGT(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGT(FieldLogs, v))
}

// LogsGTE applies the GTE predicate on the "logs" field.
func LogsGTE(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGTE(FieldLogs, v))
}

// LogsLT applies the LT predicate on the "logs" field.
func LogsLT(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLT(FieldLogs, v))
}

// LogsLTE applies the LTE predicate on the "logs" field.
func LogsLTE(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLTE(FieldLogs, v))
}

// LogsContains applies the Contains predicate on the "logs" field.
func LogsContains(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldContains(FieldLogs, v))
}

// LogsHasPrefix applies the HasPrefix predicate on the "logs" field.
func LogsHasPrefix(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldHasPrefix(FieldLogs, v))
}

// LogsHasSuffix applies the HasSuffix predicate on the "logs" field.
func LogsHasSuffix(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldHasSuffix(FieldLogs, v))
}

// LogsEqualFold applies the EqualFold predicate on the "logs" field.
func LogsEqualFold(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEqualFold(FieldLogs, v))
}

// LogsContainsFold applies the ContainsFold predicate on the "logs" field.
func LogsContainsFold(v string) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldContainsFold(FieldLogs, v))
}

// AcceptEQ applies the EQ predicate on the "accept" field.
func AcceptEQ(v bool) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldAccept, v))
}

// AcceptNEQ applies the NEQ predicate on the "accept" field.
func AcceptNEQ(v bool) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNEQ(FieldAccept, v))
}

// TimeAtEQ applies the EQ predicate on the "timeAt" field.
func TimeAtEQ(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldEQ(FieldTimeAt, v))
}

// TimeAtNEQ applies the NEQ predicate on the "timeAt" field.
func TimeAtNEQ(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNEQ(FieldTimeAt, v))
}

// TimeAtIn applies the In predicate on the "timeAt" field.
func TimeAtIn(vs ...int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldIn(FieldTimeAt, vs...))
}

// TimeAtNotIn applies the NotIn predicate on the "timeAt" field.
func TimeAtNotIn(vs ...int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldNotIn(FieldTimeAt, vs...))
}

// TimeAtGT applies the GT predicate on the "timeAt" field.
func TimeAtGT(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGT(FieldTimeAt, v))
}

// TimeAtGTE applies the GTE predicate on the "timeAt" field.
func TimeAtGTE(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldGTE(FieldTimeAt, v))
}

// TimeAtLT applies the LT predicate on the "timeAt" field.
func TimeAtLT(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLT(FieldTimeAt, v))
}

// TimeAtLTE applies the LTE predicate on the "timeAt" field.
func TimeAtLTE(v int64) predicate.DefautlDB {
	return predicate.DefautlDB(sql.FieldLTE(FieldTimeAt, v))
}

// HasDefaultdb applies the HasEdge predicate on the "defaultdb" edge.
func HasDefaultdb() predicate.DefautlDB {
	return predicate.DefautlDB(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DefaultdbTable, DefaultdbPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultdbWith applies the HasEdge predicate on the "defaultdb" edge with a given conditions (other predicates).
func HasDefaultdbWith(preds ...predicate.Users) predicate.DefautlDB {
	return predicate.DefautlDB(func(s *sql.Selector) {
		step := newDefaultdbStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DefautlDB) predicate.DefautlDB {
	return predicate.DefautlDB(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DefautlDB) predicate.DefautlDB {
	return predicate.DefautlDB(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DefautlDB) predicate.DefautlDB {
	return predicate.DefautlDB(sql.NotPredicates(p))
}
