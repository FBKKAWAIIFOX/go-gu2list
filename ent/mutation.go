// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gu2list/ent/defautldb"
	"gu2list/ent/predicate"
	"gu2list/ent/schema"
	"gu2list/ent/users"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDefautlDB = "DefautlDB"
	TypeUsers     = "Users"
)

// DefautlDBMutation represents an operation that mutates the DefautlDB nodes in the graph.
type DefautlDBMutation struct {
	config
	op               Op
	typ              string
	id               *int
	userID           *uint64
	adduserID        *int64
	logs             *string
	accept           *bool
	timeAt           *int64
	addtimeAt        *int64
	clearedFields    map[string]struct{}
	defaultdb        map[int]struct{}
	removeddefaultdb map[int]struct{}
	cleareddefaultdb bool
	done             bool
	oldValue         func(context.Context) (*DefautlDB, error)
	predicates       []predicate.DefautlDB
}

var _ ent.Mutation = (*DefautlDBMutation)(nil)

// defautldbOption allows management of the mutation configuration using functional options.
type defautldbOption func(*DefautlDBMutation)

// newDefautlDBMutation creates new mutation for the DefautlDB entity.
func newDefautlDBMutation(c config, op Op, opts ...defautldbOption) *DefautlDBMutation {
	m := &DefautlDBMutation{
		config:        c,
		op:            op,
		typ:           TypeDefautlDB,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDefautlDBID sets the ID field of the mutation.
func withDefautlDBID(id int) defautldbOption {
	return func(m *DefautlDBMutation) {
		var (
			err   error
			once  sync.Once
			value *DefautlDB
		)
		m.oldValue = func(ctx context.Context) (*DefautlDB, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DefautlDB.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDefautlDB sets the old DefautlDB of the mutation.
func withDefautlDB(node *DefautlDB) defautldbOption {
	return func(m *DefautlDBMutation) {
		m.oldValue = func(context.Context) (*DefautlDB, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DefautlDBMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DefautlDBMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DefautlDBMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DefautlDBMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DefautlDB.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "userID" field.
func (m *DefautlDBMutation) SetUserID(u uint64) {
	m.userID = &u
	m.adduserID = nil
}

// UserID returns the value of the "userID" field in the mutation.
func (m *DefautlDBMutation) UserID() (r uint64, exists bool) {
	v := m.userID
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the DefautlDB entity.
// If the DefautlDB object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefautlDBMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "userID" field.
func (m *DefautlDBMutation) AddUserID(u int64) {
	if m.adduserID != nil {
		*m.adduserID += u
	} else {
		m.adduserID = &u
	}
}

// AddedUserID returns the value that was added to the "userID" field in this mutation.
func (m *DefautlDBMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduserID
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "userID" field.
func (m *DefautlDBMutation) ResetUserID() {
	m.userID = nil
	m.adduserID = nil
}

// SetLogs sets the "logs" field.
func (m *DefautlDBMutation) SetLogs(s string) {
	m.logs = &s
}

// Logs returns the value of the "logs" field in the mutation.
func (m *DefautlDBMutation) Logs() (r string, exists bool) {
	v := m.logs
	if v == nil {
		return
	}
	return *v, true
}

// OldLogs returns the old "logs" field's value of the DefautlDB entity.
// If the DefautlDB object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefautlDBMutation) OldLogs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogs: %w", err)
	}
	return oldValue.Logs, nil
}

// ResetLogs resets all changes to the "logs" field.
func (m *DefautlDBMutation) ResetLogs() {
	m.logs = nil
}

// SetAccept sets the "accept" field.
func (m *DefautlDBMutation) SetAccept(b bool) {
	m.accept = &b
}

// Accept returns the value of the "accept" field in the mutation.
func (m *DefautlDBMutation) Accept() (r bool, exists bool) {
	v := m.accept
	if v == nil {
		return
	}
	return *v, true
}

// OldAccept returns the old "accept" field's value of the DefautlDB entity.
// If the DefautlDB object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefautlDBMutation) OldAccept(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccept is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccept requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccept: %w", err)
	}
	return oldValue.Accept, nil
}

// ResetAccept resets all changes to the "accept" field.
func (m *DefautlDBMutation) ResetAccept() {
	m.accept = nil
}

// SetTimeAt sets the "timeAt" field.
func (m *DefautlDBMutation) SetTimeAt(i int64) {
	m.timeAt = &i
	m.addtimeAt = nil
}

// TimeAt returns the value of the "timeAt" field in the mutation.
func (m *DefautlDBMutation) TimeAt() (r int64, exists bool) {
	v := m.timeAt
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeAt returns the old "timeAt" field's value of the DefautlDB entity.
// If the DefautlDB object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefautlDBMutation) OldTimeAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeAt: %w", err)
	}
	return oldValue.TimeAt, nil
}

// AddTimeAt adds i to the "timeAt" field.
func (m *DefautlDBMutation) AddTimeAt(i int64) {
	if m.addtimeAt != nil {
		*m.addtimeAt += i
	} else {
		m.addtimeAt = &i
	}
}

// AddedTimeAt returns the value that was added to the "timeAt" field in this mutation.
func (m *DefautlDBMutation) AddedTimeAt() (r int64, exists bool) {
	v := m.addtimeAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimeAt resets all changes to the "timeAt" field.
func (m *DefautlDBMutation) ResetTimeAt() {
	m.timeAt = nil
	m.addtimeAt = nil
}

// AddDefaultdbIDs adds the "defaultdb" edge to the Users entity by ids.
func (m *DefautlDBMutation) AddDefaultdbIDs(ids ...int) {
	if m.defaultdb == nil {
		m.defaultdb = make(map[int]struct{})
	}
	for i := range ids {
		m.defaultdb[ids[i]] = struct{}{}
	}
}

// ClearDefaultdb clears the "defaultdb" edge to the Users entity.
func (m *DefautlDBMutation) ClearDefaultdb() {
	m.cleareddefaultdb = true
}

// DefaultdbCleared reports if the "defaultdb" edge to the Users entity was cleared.
func (m *DefautlDBMutation) DefaultdbCleared() bool {
	return m.cleareddefaultdb
}

// RemoveDefaultdbIDs removes the "defaultdb" edge to the Users entity by IDs.
func (m *DefautlDBMutation) RemoveDefaultdbIDs(ids ...int) {
	if m.removeddefaultdb == nil {
		m.removeddefaultdb = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.defaultdb, ids[i])
		m.removeddefaultdb[ids[i]] = struct{}{}
	}
}

// RemovedDefaultdb returns the removed IDs of the "defaultdb" edge to the Users entity.
func (m *DefautlDBMutation) RemovedDefaultdbIDs() (ids []int) {
	for id := range m.removeddefaultdb {
		ids = append(ids, id)
	}
	return
}

// DefaultdbIDs returns the "defaultdb" edge IDs in the mutation.
func (m *DefautlDBMutation) DefaultdbIDs() (ids []int) {
	for id := range m.defaultdb {
		ids = append(ids, id)
	}
	return
}

// ResetDefaultdb resets all changes to the "defaultdb" edge.
func (m *DefautlDBMutation) ResetDefaultdb() {
	m.defaultdb = nil
	m.cleareddefaultdb = false
	m.removeddefaultdb = nil
}

// Where appends a list predicates to the DefautlDBMutation builder.
func (m *DefautlDBMutation) Where(ps ...predicate.DefautlDB) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DefautlDBMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DefautlDBMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DefautlDB, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DefautlDBMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DefautlDBMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DefautlDB).
func (m *DefautlDBMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DefautlDBMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.userID != nil {
		fields = append(fields, defautldb.FieldUserID)
	}
	if m.logs != nil {
		fields = append(fields, defautldb.FieldLogs)
	}
	if m.accept != nil {
		fields = append(fields, defautldb.FieldAccept)
	}
	if m.timeAt != nil {
		fields = append(fields, defautldb.FieldTimeAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DefautlDBMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case defautldb.FieldUserID:
		return m.UserID()
	case defautldb.FieldLogs:
		return m.Logs()
	case defautldb.FieldAccept:
		return m.Accept()
	case defautldb.FieldTimeAt:
		return m.TimeAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DefautlDBMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case defautldb.FieldUserID:
		return m.OldUserID(ctx)
	case defautldb.FieldLogs:
		return m.OldLogs(ctx)
	case defautldb.FieldAccept:
		return m.OldAccept(ctx)
	case defautldb.FieldTimeAt:
		return m.OldTimeAt(ctx)
	}
	return nil, fmt.Errorf("unknown DefautlDB field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefautlDBMutation) SetField(name string, value ent.Value) error {
	switch name {
	case defautldb.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case defautldb.FieldLogs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogs(v)
		return nil
	case defautldb.FieldAccept:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccept(v)
		return nil
	case defautldb.FieldTimeAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeAt(v)
		return nil
	}
	return fmt.Errorf("unknown DefautlDB field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DefautlDBMutation) AddedFields() []string {
	var fields []string
	if m.adduserID != nil {
		fields = append(fields, defautldb.FieldUserID)
	}
	if m.addtimeAt != nil {
		fields = append(fields, defautldb.FieldTimeAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DefautlDBMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case defautldb.FieldUserID:
		return m.AddedUserID()
	case defautldb.FieldTimeAt:
		return m.AddedTimeAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefautlDBMutation) AddField(name string, value ent.Value) error {
	switch name {
	case defautldb.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case defautldb.FieldTimeAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimeAt(v)
		return nil
	}
	return fmt.Errorf("unknown DefautlDB numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DefautlDBMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DefautlDBMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DefautlDBMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DefautlDB nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DefautlDBMutation) ResetField(name string) error {
	switch name {
	case defautldb.FieldUserID:
		m.ResetUserID()
		return nil
	case defautldb.FieldLogs:
		m.ResetLogs()
		return nil
	case defautldb.FieldAccept:
		m.ResetAccept()
		return nil
	case defautldb.FieldTimeAt:
		m.ResetTimeAt()
		return nil
	}
	return fmt.Errorf("unknown DefautlDB field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DefautlDBMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.defaultdb != nil {
		edges = append(edges, defautldb.EdgeDefaultdb)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DefautlDBMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case defautldb.EdgeDefaultdb:
		ids := make([]ent.Value, 0, len(m.defaultdb))
		for id := range m.defaultdb {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DefautlDBMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddefaultdb != nil {
		edges = append(edges, defautldb.EdgeDefaultdb)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DefautlDBMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case defautldb.EdgeDefaultdb:
		ids := make([]ent.Value, 0, len(m.removeddefaultdb))
		for id := range m.removeddefaultdb {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DefautlDBMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddefaultdb {
		edges = append(edges, defautldb.EdgeDefaultdb)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DefautlDBMutation) EdgeCleared(name string) bool {
	switch name {
	case defautldb.EdgeDefaultdb:
		return m.cleareddefaultdb
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DefautlDBMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DefautlDB unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DefautlDBMutation) ResetEdge(name string) error {
	switch name {
	case defautldb.EdgeDefaultdb:
		m.ResetDefaultdb()
		return nil
	}
	return fmt.Errorf("unknown DefautlDB edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op            Op
	typ           string
	id            *int
	userID        *uint64
	adduserID     *int64
	roles         **schema.Roles
	_Manager      *bool
	updateAt      *int64
	addupdateAt   *int64
	clearedFields map[string]struct{}
	logs          map[int]struct{}
	removedlogs   map[int]struct{}
	clearedlogs   bool
	done          bool
	oldValue      func(context.Context) (*Users, error)
	predicates    []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id int) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "userID" field.
func (m *UsersMutation) SetUserID(u uint64) {
	m.userID = &u
	m.adduserID = nil
}

// UserID returns the value of the "userID" field in the mutation.
func (m *UsersMutation) UserID() (r uint64, exists bool) {
	v := m.userID
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "userID" field.
func (m *UsersMutation) AddUserID(u int64) {
	if m.adduserID != nil {
		*m.adduserID += u
	} else {
		m.adduserID = &u
	}
}

// AddedUserID returns the value that was added to the "userID" field in this mutation.
func (m *UsersMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduserID
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "userID" field.
func (m *UsersMutation) ResetUserID() {
	m.userID = nil
	m.adduserID = nil
}

// SetRoles sets the "roles" field.
func (m *UsersMutation) SetRoles(s *schema.Roles) {
	m.roles = &s
}

// Roles returns the value of the "roles" field in the mutation.
func (m *UsersMutation) Roles() (r *schema.Roles, exists bool) {
	v := m.roles
	if v == nil {
		return
	}
	return *v, true
}

// OldRoles returns the old "roles" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldRoles(ctx context.Context) (v *schema.Roles, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoles: %w", err)
	}
	return oldValue.Roles, nil
}

// ResetRoles resets all changes to the "roles" field.
func (m *UsersMutation) ResetRoles() {
	m.roles = nil
}

// SetManager sets the "Manager" field.
func (m *UsersMutation) SetManager(b bool) {
	m._Manager = &b
}

// Manager returns the value of the "Manager" field in the mutation.
func (m *UsersMutation) Manager() (r bool, exists bool) {
	v := m._Manager
	if v == nil {
		return
	}
	return *v, true
}

// OldManager returns the old "Manager" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldManager(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManager is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManager requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManager: %w", err)
	}
	return oldValue.Manager, nil
}

// ResetManager resets all changes to the "Manager" field.
func (m *UsersMutation) ResetManager() {
	m._Manager = nil
}

// SetUpdateAt sets the "updateAt" field.
func (m *UsersMutation) SetUpdateAt(i int64) {
	m.updateAt = &i
	m.addupdateAt = nil
}

// UpdateAt returns the value of the "updateAt" field in the mutation.
func (m *UsersMutation) UpdateAt() (r int64, exists bool) {
	v := m.updateAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "updateAt" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "updateAt" field.
func (m *UsersMutation) AddUpdateAt(i int64) {
	if m.addupdateAt != nil {
		*m.addupdateAt += i
	} else {
		m.addupdateAt = &i
	}
}

// AddedUpdateAt returns the value that was added to the "updateAt" field in this mutation.
func (m *UsersMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdateAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "updateAt" field.
func (m *UsersMutation) ResetUpdateAt() {
	m.updateAt = nil
	m.addupdateAt = nil
}

// AddLogIDs adds the "logs" edge to the DefautlDB entity by ids.
func (m *UsersMutation) AddLogIDs(ids ...int) {
	if m.logs == nil {
		m.logs = make(map[int]struct{})
	}
	for i := range ids {
		m.logs[ids[i]] = struct{}{}
	}
}

// ClearLogs clears the "logs" edge to the DefautlDB entity.
func (m *UsersMutation) ClearLogs() {
	m.clearedlogs = true
}

// LogsCleared reports if the "logs" edge to the DefautlDB entity was cleared.
func (m *UsersMutation) LogsCleared() bool {
	return m.clearedlogs
}

// RemoveLogIDs removes the "logs" edge to the DefautlDB entity by IDs.
func (m *UsersMutation) RemoveLogIDs(ids ...int) {
	if m.removedlogs == nil {
		m.removedlogs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.logs, ids[i])
		m.removedlogs[ids[i]] = struct{}{}
	}
}

// RemovedLogs returns the removed IDs of the "logs" edge to the DefautlDB entity.
func (m *UsersMutation) RemovedLogsIDs() (ids []int) {
	for id := range m.removedlogs {
		ids = append(ids, id)
	}
	return
}

// LogsIDs returns the "logs" edge IDs in the mutation.
func (m *UsersMutation) LogsIDs() (ids []int) {
	for id := range m.logs {
		ids = append(ids, id)
	}
	return
}

// ResetLogs resets all changes to the "logs" edge.
func (m *UsersMutation) ResetLogs() {
	m.logs = nil
	m.clearedlogs = false
	m.removedlogs = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Users, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.userID != nil {
		fields = append(fields, users.FieldUserID)
	}
	if m.roles != nil {
		fields = append(fields, users.FieldRoles)
	}
	if m._Manager != nil {
		fields = append(fields, users.FieldManager)
	}
	if m.updateAt != nil {
		fields = append(fields, users.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUserID:
		return m.UserID()
	case users.FieldRoles:
		return m.Roles()
	case users.FieldManager:
		return m.Manager()
	case users.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldUserID:
		return m.OldUserID(ctx)
	case users.FieldRoles:
		return m.OldRoles(ctx)
	case users.FieldManager:
		return m.OldManager(ctx)
	case users.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case users.FieldRoles:
		v, ok := value.(*schema.Roles)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoles(v)
		return nil
	case users.FieldManager:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManager(v)
		return nil
	case users.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	var fields []string
	if m.adduserID != nil {
		fields = append(fields, users.FieldUserID)
	}
	if m.addupdateAt != nil {
		fields = append(fields, users.FieldUpdateAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUserID:
		return m.AddedUserID()
	case users.FieldUpdateAt:
		return m.AddedUpdateAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case users.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case users.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldUserID:
		m.ResetUserID()
		return nil
	case users.FieldRoles:
		m.ResetRoles()
		return nil
	case users.FieldManager:
		m.ResetManager()
		return nil
	case users.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.logs != nil {
		edges = append(edges, users.EdgeLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.logs))
		for id := range m.logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlogs != nil {
		edges = append(edges, users.EdgeLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.removedlogs))
		for id := range m.removedlogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlogs {
		edges = append(edges, users.EdgeLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	switch name {
	case users.EdgeLogs:
		return m.clearedlogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	switch name {
	case users.EdgeLogs:
		m.ResetLogs()
		return nil
	}
	return fmt.Errorf("unknown Users edge %s", name)
}
